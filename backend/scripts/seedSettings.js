const mongoose = require('mongoose');
const SystemSettings = require('../models/SystemSettings');
const User = require('../models/User');
const Role = require('../models/Role');
require('dotenv').config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://orlanddouglas_db_user:TqtwMu2HTPBszmv7@banco.asm5oa1.mongodb.net/oee_monitor?retryWrites=true&w=majority&appName=Banco';

async function seedSettings() {
  try {
    console.log('üîó Conectando ao MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB');

    // Verificar se j√° existem configura√ß√µes
    const existingSettings = await SystemSettings.findOne({ isActive: true });
    if (existingSettings) {
      console.log('‚ö†Ô∏è  Configura√ß√µes j√° existem. Pulando seed...');
      return;
    }

    // Buscar um usu√°rio administrador para ser o criador
    console.log('üîç Buscando perfil administrador...');
    const adminRole = await Role.findOne({ name: 'administrador' });
    console.log('üìã Perfis encontrados:', await Role.find({}, 'name displayName').lean());
    
    if (!adminRole) {
      console.log('‚ùå Perfil administrador n√£o encontrado. Execute seedDatabase.js primeiro.');
      return;
    }
    
    console.log('‚úÖ Perfil administrador encontrado:', adminRole.name);
    console.log('üîç Buscando usu√°rio administrador...');
    const adminUser = await User.findOne({ role: adminRole._id });
    
    if (!adminUser) {
      console.log('‚ùå Usu√°rio administrador n√£o encontrado. Execute seedDatabase.js primeiro.');
      return;
    }
    
    console.log('‚úÖ Usu√°rio administrador encontrado:', adminUser.name);

    console.log('üìù Criando configura√ß√µes padr√£o do sistema...');

    // Criar configura√ß√µes padr√£o
    const defaultSettings = new SystemSettings({
      companyName: 'Ind√∫stria OEE Monitor',
      timezone: 'America/Sao_Paulo',
      language: 'pt-BR',
      theme: 'system',
      autoRefresh: true,
      refreshInterval: 30,
      
      alertSettings: {
        emailNotifications: true,
        pushNotifications: false,
        oeeThreshold: 75,
        availabilityThreshold: 85,
        performanceThreshold: 80,
        qualityThreshold: 95,
        maintenanceAlerts: true,
        productionAlerts: true
      },
      
      securitySettings: {
        sessionTimeout: 480, // 8 horas
        passwordExpiry: 90, // 90 dias
        twoFactorAuth: false,
        auditLog: true,
        loginAttempts: 3
      },
      
      integrationSettings: {
        mesIntegration: false,
        erpIntegration: false,
        iotSensors: true,
        apiAccess: true,
        webhooks: false,
        webhookUrls: []
      },
      
      isActive: true,
      createdBy: adminUser._id
    });

    await defaultSettings.save();
    console.log('‚úÖ Configura√ß√µes padr√£o criadas com sucesso!');

    // Exibir resumo das configura√ß√µes criadas
    console.log('\nüìä Resumo das Configura√ß√µes:');
    console.log(`   ‚Ä¢ Empresa: ${defaultSettings.companyName}`);
    console.log(`   ‚Ä¢ Fuso Hor√°rio: ${defaultSettings.timezone}`);
    console.log(`   ‚Ä¢ Idioma: ${defaultSettings.language}`);
    console.log(`   ‚Ä¢ Tema: ${defaultSettings.theme}`);
    console.log(`   ‚Ä¢ Auto Refresh: ${defaultSettings.autoRefresh ? 'Ativo' : 'Inativo'}`);
    console.log(`   ‚Ä¢ Intervalo: ${defaultSettings.refreshInterval}s`);
    console.log('\nüîî Configura√ß√µes de Alertas:');
    console.log(`   ‚Ä¢ Email: ${defaultSettings.alertSettings.emailNotifications ? 'Ativo' : 'Inativo'}`);
    console.log(`   ‚Ä¢ Push: ${defaultSettings.alertSettings.pushNotifications ? 'Ativo' : 'Inativo'}`);
    console.log(`   ‚Ä¢ Limite OEE: ${defaultSettings.alertSettings.oeeThreshold}%`);
    console.log(`   ‚Ä¢ Limite Disponibilidade: ${defaultSettings.alertSettings.availabilityThreshold}%`);
    console.log(`   ‚Ä¢ Limite Performance: ${defaultSettings.alertSettings.performanceThreshold}%`);
    console.log(`   ‚Ä¢ Limite Qualidade: ${defaultSettings.alertSettings.qualityThreshold}%`);
    console.log('\nüîí Configura√ß√µes de Seguran√ßa:');
    console.log(`   ‚Ä¢ Timeout Sess√£o: ${defaultSettings.securitySettings.sessionTimeout} min`);
    console.log(`   ‚Ä¢ Expira√ß√£o Senha: ${defaultSettings.securitySettings.passwordExpiry} dias`);
    console.log(`   ‚Ä¢ 2FA: ${defaultSettings.securitySettings.twoFactorAuth ? 'Ativo' : 'Inativo'}`);
    console.log(`   ‚Ä¢ Auditoria: ${defaultSettings.securitySettings.auditLog ? 'Ativa' : 'Inativa'}`);
    console.log(`   ‚Ä¢ Tentativas Login: ${defaultSettings.securitySettings.loginAttempts}`);
    console.log('\nüîó Configura√ß√µes de Integra√ß√£o:');
    console.log(`   ‚Ä¢ MES: ${defaultSettings.integrationSettings.mesIntegration ? 'Ativo' : 'Inativo'}`);
    console.log(`   ‚Ä¢ ERP: ${defaultSettings.integrationSettings.erpIntegration ? 'Ativo' : 'Inativo'}`);
    console.log(`   ‚Ä¢ IoT Sensores: ${defaultSettings.integrationSettings.iotSensors ? 'Ativo' : 'Inativo'}`);
    console.log(`   ‚Ä¢ API Access: ${defaultSettings.integrationSettings.apiAccess ? 'Ativo' : 'Inativo'}`);
    console.log(`   ‚Ä¢ Webhooks: ${defaultSettings.integrationSettings.webhooks ? 'Ativo' : 'Inativo'}`);
    
    console.log('\nüéâ Seed de configura√ß√µes conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro ao executar seed de configura√ß√µes:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado do MongoDB');
  }
}

// Executar seed se chamado diretamente
if (require.main === module) {
  seedSettings()
    .then(() => {
      console.log('‚úÖ Processo conclu√≠do');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro:', error);
      process.exit(1);
    });
}

module.exports = seedSettings;