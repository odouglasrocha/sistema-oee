const mongoose = require('mongoose');
const ProductionRecord = require('../models/ProductionRecord');
require('dotenv').config();

if (!process.env.MONGODB_URI) {
  console.error('‚ùå MONGODB_URI n√£o est√° definida no arquivo .env');
  process.exit(1);
}
const MONGODB_URI = process.env.MONGODB_URI;

async function fixOEE() {
  try {
    console.log('üîß Corrigindo c√°lculos OEE...');
    
    await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('‚úÖ Conectado ao MongoDB');
    
    // Buscar todos os registros
    const records = await ProductionRecord.find();
    console.log(`üìä Encontrados ${records.length} registros para corrigir`);
    
    for (const record of records) {
      console.log(`\nüîç Analisando registro ${record._id}:`);
      console.log(`   M√°quina: ${record.machine}`);
      console.log(`   Data: ${record.date}`);
      console.log(`   Turno: ${record.shift}`);
      
      // Mostrar valores antes da corre√ß√£o
      console.log(`   üìà Valores ANTES:`);
      console.log(`      Meta: ${record.production?.target || 0}`);
      console.log(`      Produ√ß√£o Boa: ${record.production?.good || 0}`);
      console.log(`      Refugo Filme: ${record.production?.waste?.film || 0}`);
      console.log(`      Refugo Org√¢nico: ${record.production?.waste?.organic || 0}`);
      console.log(`      Total: ${record.production?.total || 0}`);
      console.log(`      Disponibilidade: ${record.oee?.availability || 0}%`);
      console.log(`      Performance: ${record.oee?.performance || 0}%`);
      console.log(`      Qualidade: ${record.oee?.quality || 0}%`);
      console.log(`      OEE: ${record.oee?.overall || 0}%`);
      
      // For√ßar rec√°lculo salvando o registro
      await record.save();
      
      // Buscar o registro atualizado
      const updatedRecord = await ProductionRecord.findById(record._id);
      
      console.log(`   ‚úÖ Valores DEPOIS:`);
      console.log(`      Meta: ${updatedRecord.production?.target || 0}`);
      console.log(`      Produ√ß√£o Boa: ${updatedRecord.production?.good || 0}`);
      console.log(`      Refugo Filme: ${updatedRecord.production?.waste?.film || 0}`);
      console.log(`      Refugo Org√¢nico: ${updatedRecord.production?.waste?.organic || 0}`);
      console.log(`      Total: ${updatedRecord.production?.total || 0}`);
      console.log(`      Disponibilidade: ${updatedRecord.oee?.availability || 0}%`);
      console.log(`      Performance: ${updatedRecord.oee?.performance || 0}%`);
      console.log(`      Qualidade: ${updatedRecord.oee?.quality || 0}%`);
      console.log(`      OEE: ${updatedRecord.oee?.overall || 0}%`);
      
      // Verificar se h√° valores incorretos
      if (updatedRecord.oee?.performance > 100 || updatedRecord.oee?.quality > 100 || updatedRecord.oee?.overall > 100) {
        console.log(`   ‚ö†Ô∏è  ATEN√á√ÉO: Valores ainda incorretos!`);
        
        // Corrigir manualmente
        updatedRecord.oee.performance = Math.min(100, updatedRecord.oee.performance || 0);
        updatedRecord.oee.quality = Math.min(100, updatedRecord.oee.quality || 0);
        updatedRecord.oee.overall = Math.min(100, updatedRecord.oee.overall || 0);
        
        await updatedRecord.save();
        console.log(`   üîß Valores corrigidos manualmente`);
      }
    }
    
    console.log('\nüéâ Corre√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Conex√£o fechada');
  }
}

fixOEE();